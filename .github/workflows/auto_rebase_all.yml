name: Auto Rebase Branches - main schedule


on:
  schedule:
    - cron:  '* 13 * * *'      #### 60mins
    #    - cron:  '*/10 * * * *'   

  push:
    branches:
    - zrefactor


env:
    ROOT_BRANCH_NAME: main
    BRANCHES_TO_REBASE: aniket,alex,tranchung,lets7512,andrescass,adev01,zdocs_y23487teg65f6

jobs:
  Rebase-All:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Rebasing branches ${{ env.BRANCHES_TO_REBASE }} with ${{ env.ROOT_BRANCH_NAME }}"
      - name: Checking out repository code into workspace...
        uses: actions/checkout@v3
        with:
            token: ${{ secrets.WORKFLOW_TOKEN }}

      #### No desctructive add main and local and push ALL
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo "Fetching latest..."
          git fetch origin
          git checkout ${{ env.ROOT_BRANCH_NAME }}
          echo "Beginning merge...."
          IFS=","
          for branch in $BRANCHES_TO_REBASE; do
            { 
              echo ""
              echo "##################"
              git checkout $branch
              git pull --allow-unrelated-histories 
              git merge $ROOT_BRANCH_NAME --no-edit || { git add -u . && git commit --no-edit ;}
              git push
              echo "Merge SUCCEEDED for branch $branch"

            } || {
              echo "Merge FAILED for branch $branch"

            }

          done





  ####3 rebase All branches except some branch
  # Rebase-All:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "Merging  branches ${{ env.BRANCHES_TO_REBASE }} with ${{ env.ROOT_BRANCH_NAME }}"
  #     - name: Checking out repository code into workspace...
  #       uses: actions/checkout@v3
  #     - name: Begin merge process...
  #       run: |
  #         git config user.name github-actions
  #         git config user.email github-actions@github.com
  #         echo "Fetching latest..."
  #         git fetch origin
  #         git checkout ${{ env.ROOT_BRANCH_NAME }}
  #         echo "Beginning merge...."
  #         for branch in $(git for-each-ref --format='%(refname:lstrip=-1)' refs/remotes/origin/); do
  #           if grep -q "$branch" <<< "${{ env.BRANCH_NG }}"
  #           then
  #             echo "SKIPPING $branch"
  #           else
  #             echo "Working on branch $branch"
  #             git checkout $branch
  #             git pull
  #             git merge ${{ env.ROOT_BRANCH_NAME }} --no-edit || { git add -u . && git commit --no-edit ;}
  #             git push
  #             echo "Merge SUCCEEDED for branch $branch"
  #           fi
  #         done




      #########  Rebase version : create MANY conflicts
      # - run: |
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com
      # - run: echo "Fetching latest..."
      # - run: git fetch origin
      # - run: git checkout ${{ env.ROOT_BRANCH_NAME }}
      # - run: git pull --rebase
      # - run: echo "Beginning rebase...."
      # - run: |
      #     IFS=","
      #     for branch in $BRANCHES_TO_REBASE; do
      #       { git checkout $branch  && \
      #         git pull && \
      #         git rebase $ROOT_BRANCH_NAME && \
      #         git push --force-with-lease && \
      #         echo "Rebase SUCCEEDED for branch $branch" ;} \
              
      #       || { echo "Rebase FAILED for branch $branch" && git rebase --abort ; }
            
      #     done



#### Iterate All branches  
#branches=()
#eval "$(git for-each-ref --shell --format='branches+=(%(refname))' refs/heads/)"
#for branch in "${branches[@]}"; do
#    # â€¦
#done
