# .flake8
[flake8]

################### PROGRAM ################################
# Specify the number of subprocesses that Flake8 will use to run checks in parallel.
jobs = auto

################### OUTPUT #################################
########## Verbosity ##########

# Increase the verbosity of Flake8’s output.
verbose = 0


########## Formatting ##########
# Select the formatter used to display errors to the user.
format = default

# Print the total number of errors.
count = True
# Print the source code generating the error/warning in question.
show-source = True
# Count the number of occurrences of each error/warning code and print a report.
statistics = True


########## Targets ##########
# Redirect all output to the specified file.
output-file = docs/flake8_log.py
# Also print output to stdout if output-file has been configured.
tee = True


################### FILE PATTERNS ##########################
# Provide a comma-separated list of glob patterns to exclude from checks.
exclude =
    .git,
    __pycache__,
    .pytest_cache,
    .mypy_cache,
    .github,
    utilmy/zml,
    utilmy/zzarchive,
    utilmy/zrecs,
#    */*/*zz*,
#    */*/*/*zz*,
#    */*/*/*/*zz*,
#    */*/*/*/*/*zz*,
    docs,
    scripts,
    testdata
    
    
# Provide a comma-separate list of glob patterns to include for checks.
filename =
    *.py,
    utilmy/*.py,
    utilmy/*/*.py,
    utilmy/*/*/*.py,
    utilmy/*/*/*/*.py,
    utilmy/*/*/*/*/*.py,
    utilmy/*/*/*/*/*/*.py,
    utilmy/*/*/*/*/*/*/*.py,    
    test.py,
    setup.py



################### LINTING ################################
########## Options ##########
# Report all errors, even if it is on the same line as a `# NOQA` comment.
disable-noqa = False

# Set the maximum length that any line (with some exceptions) may be.
max-line-length = 140
# Set the maximum allowed McCabe complexity value for a block of code.
max-complexity = 10
# Toggle whether pycodestyle should enforce matching the indentation of the opening bracket’s line.
# incluences E131 and E133
hang-closing = True


########## Rules ##########
# ERROR CODES
# E/W  - PEP8 errors/warnings (pycodestyle)
# F    - linting errors (pyflakes)
# C    - McCabe complexity error (mccabe)
#
# E133 - closing bracket is missing indentation (conflicts with black)
# E203 - whitespace before ‘:’ (conflicts with black)
# W503 - line break before binary operator
# F401 - module imported but unused
# F403 - ‘from module import *’ used; unable to detect undefined names


# Code    Example Message
# F401    module imported but unused
# F402    import module from line N shadowed by loop variable
# F403    ‘from module import *’ used; unable to detect undefined names
# F404    future import(s) name after other statements
# F405    name may be undefined, or defined from star imports: module
# F406    ‘from module import *’ only allowed at module level
# F407    an undefined __future__ feature name was imported
     
# F501    invalid % format literal
# F502    % format expected mapping but got sequence
# F503    % format expected sequence but got mapping
# F504    % format unused named arguments
# F505    % format missing named arguments
# F506    % format mixed positional and named arguments
# F507    % format mismatch of placeholder and argument count
# F508    % format with * specifier requires a sequence
# F509    % format with unsupported format character
# F521    .format(...) invalid format string
# F522    .format(...) unused named arguments
# F523    .format(...) unused positional arguments
# F524    .format(...) missing argument
# F525    .format(...) mixing automatic and manual numbering
# F541    f-string without any placeholders
     
# F601    dictionary key name repeated with different values
# F602    dictionary key variable name repeated with different values
# F621    too many expressions in an assignment with star-unpacking
# F622    two or more starred expressions in an assignment (a, *b, *c = d)
# F631    assertion test is a tuple, which is always True
# F632    use ==/!= to compare str, bytes, and int literals
# F633    use of >> is invalid with print function
# F634    if test is a tuple, which is always True
     
# F701    a break statement outside of a while or for loop
# F702    a continue statement outside of a while or for loop
# F703    a continue statement in a finally block in a loop
# F704    a yield or yield from statement outside of a function
# F705    a return statement with arguments inside a generator
# F706    a return statement outside of a function/method
# F707    an except: block as not the last exception handler
# F721    syntax error in doctest
# F722    syntax error in forward annotation
# F723    syntax error in type comment
     
# F811    redefinition of unused name from line N
# F821    undefined name name
# F822    undefined name name in __all__
# F823    local variable name … referenced before assignment
# F831    duplicate argument name in function definition
# F841    local variable name is assigned to but never used


# Specify a list of codes to ignore.
ignore =  E/W, C, E2, E3, E4, E5, E7, W1, W3, W5, W6,F401,
          F821,F841,F401,F811,F541,F405,F403,F402


# Specify the list of error codes you wish Flake8 to report.
select = E9

# Specify a list of mappings of files and the codes that should be ignored for the entirety of the
# file.
# per-file-ignores =
#    __init__.py:F401,F403
